In a scenario where a query will return thousands of records, is there a way to control the data into lets say a batch of 500 records at a time? If so, where do I control that here in the script, frontend or backend?
I have seen some apps where there is a button that on click it displays ex: 500 of 7500, 500 of 7000, 500 of 6500 ...

FRONTEND
        try {
            // Build query parameters
            const url = new URL('http://localhost:3000/sales/SalesDtlLst');
            const params = new URLSearchParams();
            if (cCtrlNum_) params.append('CtrlNum_', cCtrlNum_);
    
            // Send request with query parameters
            const response = await fetch(`${url}?${params.toString()}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
    
            itemsDtl = await response.json(); // Store full data array globally
            salesDtlCounter.innerHTML=`${itemsDtl.length} Records`

            updateItemTable();  // Render items using <tr>

    
        } catch (error) {
            console.error('Fetch error:', error);
        }

BACKEND
const SalesDtlLst = async (req, res) => {
  const cCtrlNum_ = req.query.CtrlNum_;

  let cSql = `SELECT 
        SALESDTL.RecordId,
        SALESDTL.CtrlNum_,
        SALESDTL.ItemCode,
        ITEMLIST.UsersCde,
        ITEMLIST.OtherCde,
        ITEMLIST.Descript,
        SALESDTL.Quantity,
        SALESDTL.ItemPrce,
        SALESDTL.DiscRate,
        SALESDTL.Amount__,
        SALESDTL.LandCost
        FROM SALESREC, SALESDTL, ITEMLIST
        WHERE SALESREC.CtrlNum_ = SALESDTL.CtrlNum_
        AND SALESDTL.ItemCode = ITEMLIST.ItemCode
        AND 1=1
        `

  // Parameters object
  const params = {};

  // Additional filters based on query parameters
  if (cCtrlNum_) {
    cSql += " AND SALESREC.CtrlNum_ LIKE @cCtrlNum_";
    params.cCtrlNum_ = `%${cCtrlNum_}%`;
  }
  
  cSql += ` ORDER BY 1 `;

  // Log SQL query and parameters for debugging
  // console.log('Parameters:', params);

  try {
    // Execute query
    const result = await queryDatabase(cSql, params);
    res.json(result);
  } catch (err) {
    console.error('Database query error:', err.message);  // Log the error message
    res.status(500).send('Error fetching sales data');
  }
};


================================
Yes, you can control the data in batches (e.g., 500 records at a time) by implementing pagination on both the frontend and the backend. This will allow you to load smaller chunks of data to improve performance, and provide a user experience where they can request the next batch of data, as seen in apps that show progress (e.g., "500 of 7500").

### How to Implement Pagination:

#### 1. **Frontend Changes (Pagination Controls)**

In the frontend, you'll need to add controls to handle the batch size and allow users to navigate between batches (pages). You can display the current batch number and the total count of records, and fetch the next set of records when the user clicks a "Next" button.

Here’s how to modify your frontend:

- Add pagination parameters (like `page` and `limit`) to your query.
- Fetch data for the appropriate page and limit on each request.

Example:

```javascript
// Keep track of current page and batch size
let currentPage = 1;
const batchSize = 500;

const loadBatch = async () => {
    try {
        // Build query parameters
        const url = new URL('http://localhost:3000/sales/SalesDtlLst');
        const params = new URLSearchParams();
        if (cCtrlNum_) params.append('CtrlNum_', cCtrlNum_);
        params.append('page', currentPage);  // Add page parameter
        params.append('limit', batchSize);   // Add limit parameter

        // Send request with query parameters
        const response = await fetch(`${url}?${params.toString()}`);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const itemsDtl = await response.json(); // Store the batch of records
        salesDtlCounter.innerHTML = `${itemsDtl.length} Records (Page ${currentPage})`; // Show current page

        updateItemTable(itemsDtl);  // Render the batch of items using <tr>

    } catch (error) {
        console.error('Fetch error:', error);
    }
};

// Load the first batch of data
loadBatch();

// Pagination button click
const nextButton = document.getElementById('nextButton');
nextButton.addEventListener('click', () => {
    currentPage++;
    loadBatch();
});
```

In this code, the `currentPage` variable determines which set of records you want to fetch. The `limit` is set to 500 records per page, and each time the "Next" button is clicked, the `currentPage` is incremented and the new batch of data is fetched.

#### 2. **Backend Changes (Implement Pagination in SQL)**

On the backend, you need to modify the SQL query to return a specific page of records, based on the `page` and `limit` parameters received from the frontend.

Here’s how you can adjust your backend to support pagination:

1. Modify your SQL query to include `LIMIT` and `OFFSET` based on the `page` and `limit` values.
2. Calculate the offset based on the current page (`(page - 1) * limit`).

Example:

```javascript
const SalesDtlLst = async (req, res) => {
  const cCtrlNum_ = req.query.CtrlNum_;
  const page = parseInt(req.query.page) || 1;  // Default to page 1
  const limit = parseInt(req.query.limit) || 500;  // Default to 500 records per page
  const offset = (page - 1) * limit;  // Calculate the offset

  let cSql = `SELECT 
        SALESDTL.RecordId,
        SALESDTL.CtrlNum_,
        SALESDTL.ItemCode,
        ITEMLIST.UsersCde,
        ITEMLIST.OtherCde,
        ITEMLIST.Descript,
        SALESDTL.Quantity,
        SALESDTL.ItemPrce,
        SALESDTL.DiscRate,
        SALESDTL.Amount__,
        SALESDTL.LandCost
        FROM SALESREC, SALESDTL, ITEMLIST
        WHERE SALESREC.CtrlNum_ = SALESDTL.CtrlNum_
        AND SALESDTL.ItemCode = ITEMLIST.ItemCode
        AND 1=1
  `;

  // Add any filters
  if (cCtrlNum_) {
    cSql += " AND SALESREC.CtrlNum_ LIKE @cCtrlNum_";
  }

  cSql += ` ORDER BY SALESDTL.RecordId 
           LIMIT ${limit} OFFSET ${offset}`; // Add LIMIT and OFFSET for pagination

  const params = {};
  if (cCtrlNum_) {
    params.cCtrlNum_ = `%${cCtrlNum_}%`;
  }

  try {
    // Execute query with pagination
    const result = await queryDatabase(cSql, params);
    res.json(result);  // Return the paginated results
  } catch (err) {
    console.error('Database query error:', err.message);  // Log the error message
    res.status(500).send('Error fetching sales data');
  }
};
```

### Key Points:
- The `page` and `limit` query parameters control the pagination behavior.
- The `OFFSET` is calculated based on the current page: `OFFSET = (page - 1) * limit`.
- `LIMIT` specifies how many records to return per request.

### Example Flow:
- On the first page, the backend fetches records 1-500.
- On the second page, the backend fetches records 501-1000.
- When the user clicks the "Next" button, the frontend increments the `currentPage`, and a new batch of data is fetched.

With this approach, you will have efficient handling of large datasets, loading data in smaller, manageable chunks.