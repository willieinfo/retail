import { showReport } from './FunctLib.js';
import { FiltrRec } from "./FiltrRec.js";

// Common function to fetch sales data
async function fetchSalesData(url, params) {
    try {
        const response = await fetch(`${url}?${params.toString()}`);
        if (!response.ok) throw new Error('Network response was not ok');
        return await response.json();
    } catch (error) {
        console.error('Fetch error:', error);
        return [];
    }
}

// Common function to generate table HTML
function generateSalesTable(data, totals, isBrand = false) {
    const formatter = new Intl.NumberFormat('en-US', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 });
    const nGP_Total = ((totals.nTotalAmt - totals.nTotalCos - totals.nTotalCon) / totals.nTotalAmt) * 100;
    const headers = isBrand ? ['Brand', 'Quantity', 'Gross', 'Discount', 'Net', 'Concession', 'Net Due', 'Cost', 'Gross Profit', 'GP %', 'CTS %']
                            : ['Store Name', 'Quantity', 'Gross', 'Discount', 'Net', 'Concession', 'Net Due', 'Cost', 'Gross Profit', 'GP %', 'CTS %'];

    return `
        <table>
            <thead>
                <tr>${headers.map(header => `<th>${header}</th>`).join('')}</tr>
            </thead>
            <tbody>
                ${data.map(item => {
                    let nGP_Prcnt = item.Amount__ ? ((item.Amount__ - item.LandCost - item.Concessi) / item.Amount__) * 100 : 0;
                    return `
                        <tr>
                            <td>${isBrand ? item.BrandNme : item.StorName || 'N/A'}</td>
                            <td>${item.Quantity || 'N/A'}</td>
                            <td>${formatter.format(item.ItemPrce) || 'N/A'}</td>
                            <td>${formatter.format(item.ItemPrce - item.Amount__) || 'N/A'}</td>
                            <td>${formatter.format(item.Amount__) || 'N/A'}</td>
                            <td>${formatter.format(item.Concessi) || 'N/A'}</td>
                            <td>${formatter.format(item.Amount__ - item.Concessi) || 'N/A'}</td>
                            <td>${formatter.format(item.LandCost) || 'N/A'}</td>
                            <td>${formatter.format(item.Amount__ - item.LandCost - item.Concessi) || 'N/A'}</td>
                            <td>${nGP_Prcnt ? nGP_Prcnt.toFixed(2) + '%' : 'N/A'}</td>
                            <td>${(item.Amount__ / totals.nTotalAmt * 100).toFixed(2) + '%' || 'N/A'}</td>
                        </tr>
                    `;
                }).join('')}
            </tbody>
            <tfoot>
                <tr><td>Total</td>
                    <td>${totals.nTotalQty}</td>
                    <td>${formatter.format(totals.nTotalPrc)}</td>
                    <td>${formatter.format(totals.nTotalDsc)}</td>
                    <td>${formatter.format(totals.nTotalAmt)}</td>
                    <td>${formatter.format(totals.nTotalCon)}</td>
                    <td>${formatter.format(totals.nTotalDue)}</td>
                    <td>${formatter.format(totals.nTotalCos)}</td>
                    <td>${formatter.format(totals.nTotalGro)}</td>
                    <td>${nGP_Total ? nGP_Total.toFixed(2) + '%' : 'N/A'}</td>
                    <td>100%</td>
                </tr>
            </tfoot>
        </table>
    `;
}

// Common function to process sales data and render it
async function processSalesData(url, params, isBrand = false) {
    const data = await fetchSalesData(url, params);

    const totals = data.reduce((acc, item) => {
        acc.nTotalQty += item.Quantity;
        acc.nTotalPrc += item.ItemPrce;
        acc.nTotalDsc += (item.ItemPrce - item.Amount__);
        acc.nTotalAmt += item.Amount__;
        acc.nTotalCon += item.Concessi;
        acc.nTotalDue += (item.Amount__ - item.Concessi);
        acc.nTotalCos += item.LandCost;
        acc.nTotalGro += (item.Amount__ - item.Concessi - item.LandCost);
        return acc;
    }, {
        nTotalQty: 0, nTotalPrc: 0, nTotalDsc: 0, nTotalAmt: 0,
        nTotalCon: 0, nTotalDue: 0, nTotalCos: 0, nTotalGro: 0
    });

    document.getElementById(isBrand ? 'saleRank2Counter' : 'saleRank1Counter').innerHTML = `${data.length} Records`;
    document.getElementById(isBrand ? 'SalesRankBrand' : 'SalesRankStore').classList.add('active');
    document.getElementById(isBrand ? 'salesRankBrand' : 'salesRankStore').innerHTML = generateSalesTable(data, totals, isBrand);
}

// Reusable function to create URL parameters
function createURLParams(paramsObj) {
    const params = new URLSearchParams();
    Object.keys(paramsObj).forEach(key => {
        if (paramsObj[key]) params.append(key, paramsObj[key]);
    });
    return params;
}

// Example usage for SalesRankStore
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.salesRankingByLocation').forEach(element => {
        element.addEventListener('click', () => {
            const params = createURLParams({
                BrandNum: null, UsersCde: null, OtherCde: null, CategNum: null,
                ItemDept: null, ItemType: null, StorNum_: null, DateFrom: null, DateTo__: null
            });
            processSalesData('http://localhost:3000/sales/SalesRankStore', params);
            showReport('SalesRankStore')
        });
    });
});

// Example usage for SalesRankBrand
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.salesRankingByBrand').forEach(element => {
        element.addEventListener('click', () => {
            const params = createURLParams({
                BrandNum: null, UsersCde: null, OtherCde: null, CategNum: null,
                ItemDept: null, ItemType: null, StorNum_: null, DateFrom: null, DateTo__: null
            });
            processSalesData('http://localhost:3000/sales/SalesRankBrand', params, true);
            showReport('SalesRankBrand')
        });
    });
});

document.getElementById('saleRank1').addEventListener('click', () => {
    FiltrRec('SaleRnk1')
});
document.getElementById('saleRank2').addEventListener('click', () => {
    FiltrRec('SaleRnk2')
});
